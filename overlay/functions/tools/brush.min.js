let c=null;import{strokeColor,lineWidth}from"/overlay/functions/tool";const Brush=(p,strokeColor,lineWidth)=>{c=p,console.log("Brush",c),$("#overlay-canvas").off("mousedown"),$("#overlay-canvas").off("mousemove"),$("#overlay-canvas").off("mouseup"),$("#overlay-canvas").on("mousedown",mouseDown),$("#overlay-canvas").on("mousemove",mouseMove),$("#overlay-canvas").on("mouseup",mouseUp),$("#tool-options").removeClass(),$("#tool-options").addClass("tool-option-enabled"),$("#tool-options").addClass("to-text"),$("#to-stroke").val(strokeColor),$("#to-line-width").text(lineWidth)};let drawing=!1,x=0,y=0;function setPosition(e){x=e.pageX,y=e.pageY}function mouseDown(e){drawing=!0,setPosition(e)}function mouseMove(e){drawing&&(c.strokeStyle=strokeColor,c.strokeCap="round",c.beginPath(),c.lineWidth=lineWidth,c.moveTo(x,y),setPosition(e),c.lineTo(x,y),c.stroke())}function mouseUp(){drawing=!1}export default Brush;